#!/usr/bin/php
<?php
/**
 * Big Batch Job
 *
 * @author Gouverneur Thomas <tgo@espix.net>
 * @copyright Copyright (c) 2011, Gouverneur Thomas
 * @version 1.0
 * @package CLI
 * @category utils
 * @subpackage list
 * @filesource
 */

  require_once("../libs/config.inc.php");
  require_once("../libs/autoload.lib.php");
  require_once("../libs/functions.lib.php");

  $stats['new'] = 0;
  $stats['mod'] = 0;

  $shortopts = "a::i::j::hxpdrntfcbuselkvgmowqyz";
  $opts = getopt($shortopts);

  if (isset($opts['h'])) {
    echo $argv[0]." [-hxpcbusdnretfl] [-i=<patchid>]\n";
    echo "\t -h\tHelp\n";
    echo "\t -l\tLoad unknown bugids from MOS\n";
    echo "\t -a=<dir>\tAdd patches from <dir>\n";
    echo "\t -e\textract data from raw bug desc\n";
    echo "\t -c\tupdate the CHECKSUM file\n";
    echo "\t -b\tUpdate the detected bundles\n";
    echo "\t -u\tUpdate the bundles readme\n";
    echo "\t -s\tCleanup the old bundle files\n";
    echo "\t -x\tDo not update the patchdiag.xref\n";
    echo "\t -p\tDo not parse the patchdiag.xref\n";
    echo "\t -g\tAdd new patchdiag.xref archives\n";
    echo "\t -j=<file>\tSpecify another file to parse\n";
    echo "\t -d\tDo not download anything\n";
    echo "\t -n\tDo not parse anything\n";
    echo "\t -r\tParse the readme anyway\n";
    echo "\t -t\tTreat the TODO queue\n";
    echo "\t -f\tForce README extract/download\n";
    echo "\t -k\tChecksum every file of a patch\n";
    echo "\t -q\tGenerate the ws2_patchdiag.xref of today...\n";
    echo "\t -v\tView if patch is present in db and readme/archive ok\n";
    echo "\t -m\tSend confirm email to users unactivated.\n";
    echo "\t -o\tInsert readmes of patches inside database...\n";
    echo "\t -o\tInsert readmes of patches inside database...\n";
    echo "\t -y\tInsert readmes of patches inside database...\n";
    echo "\t -w\tThreat the -a= directory as new solaris release to checksum..\n";
    echo "\t -i=<id>\tOnly treat this ID\n";
    exit();
  }

  $m = mysqlCM::getInstance();
  if ($m->connect()) {
    die($argv[0]." Error with SQL db: ".$m->getError()."\n");
  }

  if (isset($opts['q'])) {

    $table = "`patches`";
    $index = "`patch`, `revision`";
    $cindex = "COUNT(`patch`)";
    $where = "";
    if (isset($opts['i'])) {
      $p = explode("-", $opts['i']);
      if (count($p) != 2) { die("Malformed patch id\n"); }
      $where .= "WHERE `patch`='".$p[0]."' AND `revision`='".$p[1]."'";
    }
    $where .= " ORDER BY `releasedate` DESC";

    $it = new mIterator("Patch", $index, $table, $where, $cindex);
    $fields = array("patch", "revision", "when");
    while(($p = $it->next())) {
      $p->fetchFromId();
      echo "[-] Checking readmes for ".$p->name()."\n";
      $p->updateDBReadmes();
    }
    return 0;
  }

  if (isset($opts['y'])) {

    $table = "`bundles`";
    $index = "`id`";
    $cindex = "COUNT(`id`)";
    $where = "";
    if (isset($opts['i'])) {
      $where .= "WHERE `id`='".$opts['i']."'";
    }
    $where .= " ORDER BY `lastmod` DESC";

    $it = new mIterator("Bundle", $index, $table, $where, $cindex);
    $fields = array("id", "when");
    while(($p = $it->next())) {
      $p->fetchFromId();
      echo "[-] Checking readmes for ".$p->filename."\n";
      $p->updateDBReadmes();
    }
    return 0;
  }

  if (isset($opts['o'])) {

    $table = "`patches`";
    $index = "`patch`, `revision`";
    $cindex = "COUNT(`patch`)";
    $where = "";
    if (isset($opts['i'])) {
      $p = explode("-", $opts['i']);
      if (count($p) != 2) { die("Malformed patch id\n"); }
      $where .= "WHERE `patch`='".$p[0]."' AND `revision`='".$p[1]."'";
    }
    $where .= " ORDER BY `releasedate` DESC";

    $it = new mIterator("Patch", $index, $table, $where, $cindex);
    $fields = array("patch", "revision", "when");
    while(($p = $it->next())) {
      $p->fetchFromId();
      echo "[-] Checking readmes for ".$p->name()."\n";
      $p->updateDBReadmes();
    }
    return 0;
  }

  if (isset($opts['m'])) {
    $table = "`login`";
    $index = "`id`";
    $cindex = "COUNT(`id`)";
    $where = "WHERE is_enabled=0";
    $it = new mIterator("Login", $index, $table, $where, $cindex);
    while(($l = $it->next())) {
      $l->fetchFromId();
      echo "[-] Treating ".$l->username."...\n";
      /* Checking if user already got a confirmation code */
      $co = new UConfirm();
      $co->id_login = $l->id;
      if ($co->fetchFromField("id_login")) {
	echo "\t > need a code !\n";
        $l->sendConfirm(1);
	echo "\t > code sent!\n";
      } else { echo "\t > already sent\n"; }
      unset($l);
    }
    return 0;
  }

  if (isset($opts['g'])) {
    Patchdiag::updateDB();
    return 0;
  }

  if (isset($opts['v'])) {
    if (!isset($opts['i'])) {
      echo "[!] -v should be also with -i=<patch>\n";
      die();
    }
    $db=0;
    $readme=0;
    $archive=0;
    $p = explode("-", $opts['i']);
    if (count($p) != 2) { die("Malformed patch id\n"); }
    $p = new Patch($p[0], $p[1]);
    if ($p->fetchFromId()) {
      echo $p->name().":$db:$readme:$archive\n";
      return 0;
    }
    $db=1;
    if (file_exists($p->readmePath())) {
      $readme = 1;
    }
    if (file_exists($p->findArchive())) {
      $archive = 1;
    }
    echo $p->name().":$db:$readme:$archive\n";
    return 0;
  }
  /* check for solaris release inside -a=<pwd> */
  if (isset($opts['w'])) {
    if (!isset($opts['a'])) {
      echo "[!] No directory providden...\n";
      die();
    }
    $dir = $opts['a'];
    OSRelease::checksum($dir);
    return;
  }

  /* check for patches checksumming */
  if (isset($opts['k'])) {
    $table = "`patches`";
    $index = "`patch`, `revision`";
    $cindex = "COUNT(`patch`)";
    $where = "";
    if (isset($opts['i'])) {
      $p = explode("-", $opts['i']);
      if (count($p) != 2) { die("Malformed patch id\n"); }
      $where .= "WHERE `patch`='".$p[0]."' AND `revision`='".$p[1]."'";
    }
    $where .= " ORDER BY `releasedate` DESC";

    $it = new mIterator("Patch", $index, $table, $where, $cindex);
    $fields = array("patch", "revision", "when");
    while(($p = $it->next())) {
      echo "[-] Treating ".$p->name()."...\n";
      $p->fetchFromId();
      $archive = $p->findArchive();
      if (!$archive) {
        echo "[-] Archive not found, trying to get it from master...\n";
	$rc = $p->getFromMaster();
        if ($rc) continue;
      }
      echo "[-] Archive being extracted if needed...\n";
      /* Check if archive is already extracted */
      if ($p->extract()) {
        continue;
      }
      echo "[-] Will try to checksum patch ".$p->name()."\n";
      $p->mkFilesSum();
    }

    return;
  }

  /* add patches from dir */
  if (isset($opts['a'])) {
    if (empty($opts['a'])) {
      echo "[!] syntax error\n";
      return;
    }
    $dp = $opts['a'];
    Patch::browseDir($dp);
    return;
  }

  /* new bugs */
  if (isset($opts['l'])) {
    if (isset($opts['i'])) {
      $bid = $opts['i'];
    }
    $i=0;
    $table = "`bugids`";
    $index = "`id`";
    $cindex = "COUNT(`id`)";
    $where = "WHERE `available`='0' and `tried`='0'";
    if (isset($bid)) {
      $where = "WHERE `id`='$bid'";
    }
    $it = new mIterator("Bugid", $index, $table, $where, $cindex);
    while(($bug = $it->next())) {
      echo "[-] (left: ".$it->left().") Trying to download ".$bug->id."..";
      $bug->fetchFromId();
      $bug->fetchFulltext();
      $rc = $bug->dl();
      if ($rc)
        echo "failed\n";
      else
	echo "done\n";
      unset($bug);
    }
    return;
  }

  /* Bugs parsing */
  if (isset($opts['e'])) {
    echo "[-] Fetching raw bug ids..";
    $table = "`bugids`";
    $index = "`id`";
    $cindex = "COUNT(`id`)";
    $where = "WHERE bugids.is_raw=1";
    if (isset($opts['i'])) {
      $bid = $opts['i'];
      $where .= " AND bugids.id='$bid'";
    }
    $it = new mIterator("Bugid", $index, $table, $where, $cindex);
    while(($bug = $it->next())) {
      echo "[-] Treating ".$bug->id."...\n";
      echo "    > fetching datas ...";
      $bug->fetchFromId();
      $bug->fetchFulltext();
      echo "done\n";
      echo "    > Trying to parse data from raw stuff..\n";
      $bug->parseRaw(1);
      unset($bug);
    }
    return;
  }

  /* Bundle mgmt */
  if (isset($opts['b'])) {
    Bundle::detectBundles();
    Bundle::downloadMissing();
//    Bundle::checkUpdates();
    return;
  }
  if (isset($opts['s'])) { /* cleanup old bundles' files */
    echo "[-] Loading bundles ...";
    $bundles = array();
    $table = "`bundles`";
    $index = "`id`";
    $where = "";
    if (($idx = mysqlCM::getInstance()->fetchIndex($index, $table, $where)))
    {
      foreach($idx as $t) {
        $g = new Bundle($t['id']);
        $g->fetchFromId();
        array_push($bundles, $g);
      }
    }
    echo "done\n";
    foreach($bundles as $bundle) {
      echo "[-] Searching for current archive of ".$bundle->filename."...";
      $current = $bundle->findArchive();
      if (file_exists($current)) {
	echo "found\n";
        echo "[-] Cleaning up ".$bundle->filename."...\n";
        $archives = glob($config['bndlpath']."/".$bundle->filename."-*");
	foreach ($archives as $archive) {
          if (strcmp($archive, $current)) {
	    echo "   > removing old ".$archive."...";
	    unlink($archive);
	    echo "done\n";
	  }
	}
      } else {
	echo "not found\n";
        continue;
      }
    }
    return;
  }
  if (isset($opts['u'])) {
    echo "[-] Loading bundles ...";
    $bundles = array();
    $table = "`bundles`";
    $index = "`id`";
    $where = "";
    if (($idx = mysqlCM::getInstance()->fetchIndex($index, $table, $where)))
    {
      foreach($idx as $t) {
        $g = new Bundle($t['id']);
        $g->fetchFromId();
        array_push($bundles, $g);
      }
    }
    echo "done\n";
    foreach($bundles as $bundle) {
      $bundle->checkReadme();
      $bundle->parseReadme();
    }
    return;
  }

  /* Update CHECKSUM file */
  if (isset($opts['c'])) {
    if (!isset($opts['d'])) {
      echo "[-] Downloading CHECKSUMS file...";
      if (Checksum::downloadFile()) {
        echo "failed\n";
        exit;
      } else {
        echo "done\n";
      }
    }
    echo "[-] Parsing CHECKSUMS for new entries...\n";
    Checksum::updateFile();
    return;
  }

  if (!isset($opts['x']) && !isset($opts['d']) && !isset($opts['t'])) {
    echo "[-] Updating the patchdiag.xref file...";
    if (Patchdiag::updatePatchdiag()) {
      echo "failed\n";
      exit;
    } else {
      echo "done\n";
    }
  }

  if (!isset($opts['p']) && !isset($opts['t'])) {
    echo "[-] Parsing patchdiag.xref for new patches...\n";
    if (isset($opts['j']) && !empty($opts['j'])) {
      Patchdiag::parsePatchdiag($opts['j'], true);
      return 0; // exit after parsing if file is specified
    } else {
      if (isset($opts['f'])) {
        Patchdiag::parsePatchdiag(NULL, true);
      } else {
        Patchdiag::parsePatchdiag();
      }
    }
  }
  
  $patches = array();
  if (isset($opts['t'])) {
    if (isset($opts['j']) && !empty($opts['j'])) {
      if (file_exists($opts['j'])) {
	Patch::addListFile($opts['j']);
      }
      return 0;
    } else {
      echo "[-] Fetching the toadd queue from databases and flag patches to update: .";
      $table = "`toadd`";
      $index = "`patch`, `rev`";
      $where = "";
      if (($idx = mysqlCM::getInstance()->fetchIndex($index, $table, $where)))
      {
        $i=0;
        foreach($idx as $t) {
          $i++;
          $g = new Patch($t['patch'], $t['rev']);
          if ($g->fetchFromId()) {
  	  $g->insert();
  	}
          $g->to_update = 1;
          $g->update();
          /* Remove from toadd */
          $q = "DELETE FROM `toadd` WHERE `patch`='".$g->patch."' AND `rev`='".$g->revision."'";
          $m->rawQuery($q);
        }
      }
      echo "done\n";
    }
  } 

  $table = "`patches`";
  $index = "`patch`, `revision`";
  $cindex = "COUNT(`patch`)";
  $where = ""; $w = 0;
  if (isset($opts['t'])) {
    if ($w) { $where .= " AND "; $w++; } else { $where .= " WHERE "; $w++; }
    $where .= "`to_update`=1"; $w++;
  }
  if (isset($opts['i'])) {
    $p = explode("-", $opts['i']);
    if (count($p) != 2) { die("Malformed patch id\n"); }
    if ($w) { $where .= " AND "; $w++; } else { $where .= " WHERE "; $w++; }
    $where .= "`patch`='".$p[0]."' AND `revision`='".$p[1]."'";
  }
  $where .= " ORDER BY `releasedate` DESC";

  $it = new mIterator("Patch", $index, $table, $where, $cindex);

  echo "[-] Trying to treat ".$it->count()." patches:\n";
  while(($p = $it->next())) {
    if ($p->fetchFromId()) {
      echo "[!] error. unable to fetch patch ".$p->name()."\n";
      continue;
    }
    if ($p->to_update && isset($opts['t'])) {
      $p->to_update = 0;
      $p->update();
    }

    $archive = $p->findArchive();
    if (!$archive && isset($opts['k'])) {
      $rc = $p->checkPresence();
    }

    if ($archive == null && !$p->isAlreadyTried()) { /* New patch to download */
      if (!isset($opts['d'])) {
        $p->checkPath();
        $p->tryDownload();
      }
    }
    if (!$archive) $archive = $p->findArchive();
    if ($archive != null) {
        
      if ($p->updateArchiveSize($archive)) {
        echo "[-] Updated filesize: ".$p->filesize."\n";
        $p->update();
      }
      if (!file_exists($archive.".md5sum")) {
        echo "[-] Generating MD5..";
        $p->makeMD5($archive, $archive.".md5sum");
        echo "done\n";
      }
      if (!file_exists($archive.".sha512sum")) {
        echo "[-] Generating SHA512..";
        $p->makeSHA512($archive, $archive.".sha512sum");
        echo "done\n";
      }
      if (!file_exists($p->readmePath())) {
        echo "[-] Trying to extract README for ".$p->name()."..";
  	$ret = $p->extractReadme();
	if (!$ret) {
  	  echo "done\n";
        } else {
	  echo "failed\n";
        }
      }
    }
    if (file_exists($p->readmePath()) && !filesize($p->readmePath())) {
      unlink($p->readmePath());
    }
    $now = time();
    if (!file_exists($p->readmePath()) && file_exists($p->path()."/.README.".$p->name()) && isset($opts['t'])) { /* retry the readme download */
      unlink ($p->path()."/.README.".$p->name());
    } else if (file_exists($p->readmePath()) && isset($opts['t'])) { /* we will try to gather a new version of the readme, so, rename the file first.. */
      rename($p->readmePath(), $p->readmePath()."-".$now);
      echo "[-] Readme for ".$p->name()." is flagged for redownload...\n";
    }
    if (!file_exists($p->readmePath()) && (!file_exists($p->path()."/.README.".$p->name()) || isset($opts['f']))) { /* try to download the readme file */
      if (!isset($opts['d'])) {
        echo "[-] Trying to download README for ".$p->name()."..";
        $ret = $p->downloadReadme();
        if ($ret) {
    	  echo "failed\n";
        } else {
  	  echo "done\n";
	  if (file_exists($p->readmePath()) && !filesize($p->readmePath()) && !isset($opts['t'])) {
	    $p->updateDBReadmes();
	  }
        }
      }
    }
    if (isset($opts['t']) && file_exists($p->readmePath()) && !filesize($p->readmePath())) { // restore the old readme
      unlink($p->readmePath());
      rename($p->readmePath()."-".$now, $p->readmePath());
    } else if (isset($opts['t']) && !file_exists($p->readmePath()) && file_exists($p->readmePath()."-".$now)) {
      rename($p->readmePath()."-".$now, $p->readmePath());
    } else if (isset($opts['t']) && file_exists($p->readmePath()) && file_exists($p->readmePath()."-".$now)) { // we possibly got a new version, let's check
      if (filesize($p->readmePath()) == filesize($p->readmePath()."-".$now) &&
          md5(file_get_contents($p->readmePath())) == md5(file_get_contents($p->readmePath()."-".$now))) {
         // This is the same as before, remove the old one.
         unlink($p->readmePath()."-".$now);
         echo "[-] Same Readme for ".$p->name()." has been redownload...\n";
      } else {
	 $p->updateDBReadmes();
         echo "[-] New version of Readme for ".$p->name()." has been download...\n";
      }
    }
    if (file_exists($p->readmePath()) && !isset($opts['n'])) {
      $p->fetchData();
      if ($p->data("readme_done") != 1 || isset($opts['t']) || isset($opts['r']) || isset($opts['f'])) {
        echo "[-] Loading ".$p->name()." patch datas...";
        $p->fetchFromId();
        $p->fetchAll();
        echo "done\n";
        echo "[-] Parsing the readme file...\n";
  	$fc = file_get_contents($p->readmePath());
	if (isset($opts['t'])) {
          $ret = $p->readme($fc, true);
        } else {
          $ret = $p->readme($fc);
	}
        unset($fc);
        if ($ret > 0) {
	  $p->setData("readme_done", 1);
	  $p->update();
	}
      }
    }
    
    unset($p);
  }

  /* Bugs updates */
  if (isset($opts['t'])) {
    /* Fetch bugs id */
    $bugs = array();
    $table = "`bugs_update`";
    $index = "`bugid`";
    $where = "";
    if (($idx = mysqlCM::getInstance()->fetchIndex($index, $table, $where))) {
      foreach($idx as $t) {
        $g = new Bugid($t['bugid']);
        array_push($bugs, $g);
      }
    }
    echo "done\n";

    for ($i=0,$cnt=0, $c = count($bugs); $i<$c; $i++,$cnt++) {
      $bug = $bugs[$i];
      echo "[-] (left: ".($c - $i).") Trying to download ".$bug->id."..";
      if ($bug->fetchFromId()) {
	$bug->insert();
      }
      $bug->fetchFulltext();
      $rc = $bug->dl(1);
      if ($rc)
        echo "failed\n";
      else
	echo "done\n";

      /* parse bug */
      echo "done\n";
      echo "    > Trying to parse data from raw stuff..\n";
      $bug->parseRaw();

      /* Delete from the todo list */
      $q = "DELETE FROM `bugs_update` WHERE `bugid`=".$m->quote($bug->id);
      $m->rawQuery($q);
      unset($bug);
      $bugs[$i] = null;
    }
  }

  if (!isset($opts['i']) && !isset($opts['t'])) {
    IrcMsg::void();
    Announce::getInstance()->msg(0, "[BATCH] Finished batch run. ".$stats['new']." new patches | ".$stats['mod']." patches updated.", MSG_ADM);
  }
  $m->disconnect();

?>
