#!/usr/bin/php
<?php
/**
 * Big Batch Job
 *
 * @author Gouverneur Thomas <tgo@ians.be>
 * @copyright Copyright (c) 2011, Gouverneur Thomas
 * @version 1.0
 * @package CLI
 * @category utils
 * @subpackage list
 * @filesource
 */

  require_once("../libs/config.inc.php");
  require_once("../libs/autoload.lib.php");
  require_once("../libs/functions.lib.php");

  $stats['new'] = 0;
  $stats['mod'] = 0;

  $shortopts = "a::i::hxpdrntfcbuselk";
  $opts = getopt($shortopts);

  if (isset($opts['h'])) {
    echo $argv[0]." [-hxpcbusdnretfl] [-i=<patchid>]\n";
    echo "\t -h\tHelp\n";
    echo "\t -l\tLoad unknown bugids from MOS\n";
    echo "\t -a=<dir>\tAdd patches from <dir>\n";
    echo "\t -e\textract data from raw bug desc\n";
    echo "\t -c\tupdate the CHECKSUM file\n";
    echo "\t -b\tUpdate the detected bundles\n";
    echo "\t -u\tUpdate the bundles readme\n";
    echo "\t -s\tCleanup the old bundle files\n";
    echo "\t -x\tDo not update the patchdiag.xref\n";
    echo "\t -p\tDo not parse the patchdiag.xref\n";
    echo "\t -d\tDo not download anything\n";
    echo "\t -n\tDo not parse anything\n";
    echo "\t -r\tParse the readme anyway\n";
    echo "\t -t\tTreat the TODO queue\n";
    echo "\t -f\tForce README extract/download\n";
    echo "\t -k\tCheck for patches checksums\n";
    echo "\t -i=<id>\tOnly treat this ID\n";
    exit();
  }

  echo "[-] Connecting to MySQL...";
  $m = mysqlCM::getInstance();
  if ($m->connect()) {
    die($argv[0]." Error with SQL db: ".$m->getError()."\n");
  }
  echo "done\n";

  /* check for patches checksumming */
  if (isset($opts['k'])) {
    $table = "`patches`";
    $index = "`patch`, `revision`";
    $cindex = "COUNT(`patch`)";
    $where = "";
    if (isset($opts['i'])) {
      $p = explode("-", $opts['i']);
      if (count($p) != 2) { die("Malformed patch id\n"); }
      $where .= "WHERE `patch`='".$p[0]."' AND `revision`='".$p[1]."'";
    }
    $where .= " ORDER BY `releasedate` DESC";

    $it = new mIterator("Patch", $index, $table, $where, $cindex);
    while(($p = $it->next())) {
      $p->fetchFromId();
      $rc = $p->checkSum();
      if ($rc == -3) {
        echo "[CSUM] Not OK for ".$p->name()."\n";
      } else if ($rc == 0) {
        echo "[CSUM] OK for ".$p->name()."\n";
	continue;
      } else {
        echo "[CSUM] problem for ".$p->name()."\n";
      }

    }


    return;
  }

  /* add patches from dir */
  if (isset($opts['a'])) {
    if (empty($opts['a'])) {
      echo "[!] syntax error\n";
      return;
    }
    $dp = $opts['a'];
    Patch::browseDir($dp);
    return;
  }

  /* new bugs */
  if (isset($opts['l'])) {
    if (isset($opts['i'])) {
      $bid = $opts['i'];
    }
    $i=0;
    $table = "`bugids`";
    $index = "`id`";
    $cindex = "COUNT(`id`)";
    $where = "WHERE `available`='0' and `tried`='0'";
    if (isset($bid)) {
      $where = "WHERE `id`='$bid'";
    }
    $it = new mIterator("Bugid", $index, $table, $where, $cindex);
    while(($bug = $it->next())) {
      echo "[-] (left: ".$it->left().") Trying to download ".$bug->id."..";
      $bug->fetchFromId();
      $bug->fetchFulltext();
      $rc = $bug->dl();
      if ($rc)
        echo "failed\n";
      else
	echo "done\n";
      unset($bug);
    }
    return;
  }

  /* Bugs parsing */
  if (isset($opts['e'])) {
    echo "[-] Fetching raw bug ids..";
    $table = "`bugids`";
    $index = "`id`";
    $cindex = "COUNT(`id`)";
    $where = "WHERE bugids.is_raw=1";
    if (isset($opts['i'])) {
      $bid = $opts['i'];
      $where .= " AND bugids.id='$bid'";
    }
    $it = new mIterator("Bugid", $index, $table, $where, $cindex);
    while(($bug = $it->next())) {
      echo "[-] Treating ".$bug->id."...\n";
      echo "    > fetching datas ...";
      $bug->fetchFromId();
      $bug->fetchFulltext();
      echo "done\n";
      echo "    > Trying to parse data from raw stuff..\n";
      $bug->parseRaw();
      unset($bug);
    }
    return;
  }

  /* Bundle mgmt */
  if (isset($opts['b'])) {
    Bundle::detectBundles();
    Bundle::downloadMissing();
    return;
  }
  if (isset($opts['s'])) { /* cleanup old bundles' files */
    echo "[-] Loading bundles ...";
    $bundles = array();
    $table = "`bundles`";
    $index = "`id`";
    $where = "";
    if (($idx = mysqlCM::getInstance()->fetchIndex($index, $table, $where)))
    {
      foreach($idx as $t) {
        $g = new Bundle($t['id']);
        $g->fetchFromId();
        array_push($bundles, $g);
      }
    }
    echo "done\n";
    foreach($bundles as $bundle) {
      echo "[-] Searching for current archive of ".$bundle->filename."...";
      $current = $bundle->findArchive();
      if (file_exists($current)) {
	echo "found\n";
        echo "[-] Cleaning up ".$bundle->filename."...\n";
        $archives = glob($config['bndlpath']."/".$bundle->filename."-*");
	foreach ($archives as $archive) {
          if (strcmp($archive, $current)) {
	    echo "   > removing old ".$archive."...";
	    unlink($archive);
	    echo "done\n";
	  }
	}
      } else {
	echo "not found\n";
        continue;
      }
    }
    return;
  }
  if (isset($opts['u'])) {
    echo "[-] Loading bundles ...";
    $bundles = array();
    $table = "`bundles`";
    $index = "`id`";
    $where = "";
    if (($idx = mysqlCM::getInstance()->fetchIndex($index, $table, $where)))
    {
      foreach($idx as $t) {
        $g = new Bundle($t['id']);
        $g->fetchFromId();
        array_push($bundles, $g);
      }
    }
    echo "done\n";
    foreach($bundles as $bundle) {
      $bundle->checkReadme();
      $bundle->parseReadme();
    }
    return;
  }

  /* Update CHECKSUM file */
  if (isset($opts['c'])) {
    echo "[-] Downloading CHECKSUMS file...";
    if (Checksum::downloadFile()) {
      echo "failed\n";
      exit;
    } else {
      echo "done\n";
    }
    echo "[-] Parsing CHECKSUMS for new entries...\n";
    Checksum::updateFile();
    return;
  }

  if (!isset($opts['x']) && !isset($opts['d']) && !isset($opts['t'])) {
    echo "[-] Updating the patchdiag.xref file...";
    if (Patch::updatePatchdiag()) {
      echo "failed\n";
      exit;
    } else {
      echo "done\n";
    }
  }

  if (!isset($opts['p']) && !isset($opts['t'])) {
    echo "[-] Parsing patchdiag.xref for new patches...\n";
    Patch::parsePatchdiag();
  }
  
  $patches = array();
  if (isset($opts['t'])) {
    echo "[-] Fetching the toadd queue from databases.";
    $table = "`toadd`";
    $index = "`patch`, `rev`";
    $where = "";
    if (($idx = mysqlCM::getInstance()->fetchIndex($index, $table, $where)))
    {
      $i=0;
      foreach($idx as $t) {
        if ($i==1000) { echo "."; $i=0; }
        $i++;
        $g = new Patch($t['patch'], $t['rev']);
        array_push($patches, $g);
      }
    }
    echo "done\n";
  } else {
    $table = "`patches`";
    $index = "`patch`, `revision`";
    $cindex = "COUNT(`patch`)";
    $where = "";
    if (isset($opts['i'])) {
      $p = explode("-", $opts['i']);
      if (count($p) != 2) { die("Malformed patch id\n"); }
      $where .= "WHERE `patch`='".$p[0]."' AND `revision`='".$p[1]."'";
    }
    $where .= " ORDER BY `releasedate` DESC";

    $it = new mIterator("Patch", $index, $table, $where, $cindex);

    echo "[-] Trying to treat ".$it->count()." patches:\n";
    while(($p = $it->next())) {
      if ($p->fetchFromId() && isset($opts['t'])) {
        echo "[-] Added new patch: ".$p->name()."\n";
        $p->insert();
      }

      $archive = $p->findArchive();
      if ($archive == null && !$p->isAlreadyTried()) { /* New patch to download */
        if (!isset($opts['d'])) {
          $p->checkPath();
          $p->tryDownload();
        }
      }
      if (!$archive) $archive = $p->findArchive();
      if ($archive != null) {
        
        if ($p->updateArchiveSize($archive)) {
          echo "[-] Updated filesize: ".$p->filesize."\n";
          $p->update();
        }
        if (!file_exists($archive.".md5sum")) {
          echo "[-] Generating MD5..";
          $p->makeMD5($archive, $archive.".md5sum");
          echo "done\n";
        }
        if (!file_exists($archive.".sha512sum")) {
          echo "[-] Generating SHA512..";
          $p->makeSHA512($archive, $archive.".sha512sum");
          echo "done\n";
        }
        if (!file_exists($p->readmePath())) {
          echo "[-] Trying to extract README for ".$p->name()."..";
  	  $ret = $p->extractReadme();
	  if (!$ret) {
  	    echo "done\n";
          } else {
	    echo "failed\n";
          }
        }
      }
      if (file_exists($p->readmePath()) && !filesize($p->readmePath())) {
        unlink($p->readmePath());
      }
      if (!file_exists($p->readmePath()) && (!file_exists($p->path()."/.README.".$p->name()) || isset($opts['f']))) { /* try to download the readme file */
        if (!isset($opts['d'])) {
          echo "[-] Trying to download README for ".$p->name()."..";
          $ret = $p->downloadReadme();
          if ($ret) {
    	    echo "failed\n";
          } else {
  	    echo "done\n";
          }
        }
      }
      if (file_exists($p->readmePath()) && !isset($opts['n'])) {
        $p->fetchData();
        if ($p->data("readme_done") != 1 || isset($opts['r']) || isset($opts['f'])) {
          echo "[-] Loading ".$p->name()." patch datas...";
          $p->fetchFromId();
          $p->fetchAll();
          echo "done\n";
          echo "[-] Parsing the readme file...\n";
  	  $fc = file_get_contents($p->readmePath());
          $ret = $p->readme($fc);
          unset($fc);
          if ($ret > 0) {
	    $p->setData("readme_done", 1);
	    $p->update();
  	  }
        }
      }
      if (isset($opts['t'])) {
        /* Remove from toadd */
        $q = "DELETE FROM `toadd` WHERE `patch`='".$p->patch."' AND `rev`='".$p->revision."'";
        $m->rawQuery($q);
      }
      unset($p);
    }
  }

  /* Bugs updates */
  if (isset($opts['t'])) {
    /* Fetch bugs id */
    $bugs = array();
    $table = "`bugs_update`";
    $index = "`bugid`";
    $where = "";
    if (($idx = mysqlCM::getInstance()->fetchIndex($index, $table, $where))) {
      foreach($idx as $t) {
        $g = new Bugid($t['bugid']);
        array_push($bugs, $g);
      }
    }
    echo "done\n";

    for ($i=0,$cnt=0, $c = count($bugs); $i<$c; $i++,$cnt++) {
      $bug = $bugs[$i];
      echo "[-] (left: ".($c - $i).") Trying to download ".$bug->id."..";
      $bug->fetchFromId();
      $bug->fetchFulltext();
      $rc = $bug->dl(1);
      if ($rc)
        echo "failed\n";
      else
	echo "done\n";

      /* parse bug */
      echo "done\n";
      echo "    > Trying to parse data from raw stuff..\n";
      $bug->parseRaw();

      /* Delete from the todo list */
      $q = "DELETE FROM `bugs_update` WHERE `bugid`=".$m->quote($bug->id);
      $m->rawQuery($q);
      unset($bug);
      $bugs[$i] = null;
    }
  }

  if (!isset($opts['i']) && !isset($opts['t'])) {
    Announce::getInstance()->msg(0, "[BATCH] Finished batch run. ".$stats['new']." new patches | ".$stats['mod']." patches updated.");
  }
  $m->disconnect();

?>
